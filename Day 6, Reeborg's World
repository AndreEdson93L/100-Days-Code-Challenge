#https://reeborg.ca/reeborg.html

def turn_right():
    turn_left()
    turn_left()
    turn_left()
    
#Draw Square
turn_left()
move()
turn_right()
move()
turn_right()
move()
turn_right()
move()

#////_________________////
def turn_right():
    repeat 3:
        turn_left()
        
def robot_fly():
    repeat 2:
        move()
        turn_right()
    
def jump():
    move()
    turn_left()
    robot_fly()
    move()
    turn_left()
    
repeat 6:
    jump()

#////_________________////
def turn_right():
    repeat 3:
        turn_left()
        
def robot_fly():
    repeat 2:
        move()
        turn_right()
    
def jump():
    move()
    turn_left()
    robot_fly()
    move()
    turn_left()
    
for step in range(6):
    jump()

#////_________________////
def turn_right():
    repeat 3:
        turn_left()
        
def robot_fly():
    repeat 2:
        move()
        turn_right()
    
def jump():
    move()
    turn_left()
    robot_fly()
    move()
    turn_left()

number_of_hurdles = 6
while number_of_hurdles > 0:
    jump()
    number_of_hurdles -= 1
    print(number_of_hurdles)

#////_________________////
def turn_right():
    repeat 3:
        turn_left()
        
def robot_fly():
    repeat 2:
        move()
        turn_right()
    
def jump():
    move()
    turn_left()
    robot_fly()
    move()
    turn_left()

#while at_goal != True:
while not at_goal():
    jump()

#////_________________////
"""
Hurdles race
Reeborg has entered a hurdle race. Make him run the course, following the path shown.

The position and number of hurdles changes each time this world is reloaded.
What you need to know
The functions move() and turn_left().
The conditions front_is_clear() or wall_in_front(), at_goal(), and their negation.
How to use a while loop and an if statement.
Your program should also be valid for worlds Hurdles 1 and Hurdles 2.
"""
def turn_right():
    repeat 3:
        turn_left()
        
def robot_fly():
    repeat 2:
        move()
        turn_right()
    
def jump():
    turn_left()
    robot_fly()
    move()
    turn_left()
    
while not at_goal():
    if not wall_in_front():
        move()
    else:
        jump()

#////_________________////
def turn_right():
    repeat 3:
        turn_left()
        
def robot_fly():
    repeat 2:
        turn_right()
        move()
    
def walk_aside_the_wall():
   while wall_on_right():
    if front_is_clear():
        move()
    else:
        break
        
def jump():
    turn_left()
    walk_aside_the_wall()
    robot_fly()
    walk_aside_the_wall()
    turn_left()
    
while not at_goal():
    if not wall_in_front() and not right_is_clear():
        move()
    else:
        jump()
